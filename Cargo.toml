[workspace]
members = [
    "protocol",
    "server"
]
resolver = "2"

[workspace.lints.rust]
unknown_lints = "deny"
# TODO: figure out how to enable unstable lints
# fuzzy_provenance_casts = "warn"
# lossy_provenance_casts = "warn"
# multiple_supertrait_upcastable = "warn"
# must_not_suspend = "warn?"
# non_exhaustive_omitted_patterns = "warn"
# unnameable_types = "warn"

absolute_paths_not_starting_with_crate = "warn"
# box_pointers = "warn" # useless
deprecated_in_future = "warn"
elided_lifetimes_in_paths = "warn"
explicit_outlives_requirements = "warn"
ffi_unwind_calls = "warn"
keyword_idents = "warn"
let_underscore_drop = "warn"
macro_use_extern_crate = "warn"
meta_variable_misuse = "warn"
missing_abi = "warn"
# missing_copy_implementations = "warn" # bad practice imo
missing_debug_implementations = "warn"
# missing_docs = "warn"
non_ascii_idents = "warn"
pointer_structural_match = "warn"
rust_2021_incompatible_closure_captures = "warn"
rust_2021_incompatible_or_patterns = "warn"
rust_2021_prefixes_incompatible_syntax = "warn"
rust_2021_prelude_collisions = "warn"
single_use_lifetimes = "warn"
# trivial_casts = "warn" # inconvenient
trivial_numeric_casts = "warn"
unreachable_pub = "warn"
# unsafe_code = "warn" # defo need this
unsafe_op_in_unsafe_fn = "warn"
# unstable_features = "warn" # i like to live on the edge
unused_crate_dependencies = "warn"
unused_extern_crates = "warn"
unused_import_braces = "warn"
unused_lifetimes = "warn"
unused_macro_rules = "warn"
# unused_qualifications = "warn" # e.g. packet::Id
# unused_results = "warn" # [must-use] already covers this
unused_tuple_struct_fields = "warn"
variant_size_differences = "warn"



[workspace.lints.clippy]
# start with EVERYTHING enabled (except deprecated lints ofc)
cargo       = { level = "warn", priority = -1 }
complexity  = { level = "warn", priority = -1 }
correctness = { level = "warn", priority = -1 }
nursery     = { level = "warn", priority = -1 }
pedantic    = { level = "warn", priority = -1 }
perf        = { level = "warn", priority = -1 }
restriction = { level = "warn", priority = -1 }
style       = { level = "warn", priority = -1 }
suspicious  = { level = "warn", priority = -1 }

# cargo exceptions
multiple_crate_versions = "allow" # unpreventable
cargo_common_metadata = "allow" # TODO (license)

# pedantic exceptions
enum_glob_use = "allow" # unsure
wildcard_imports = "allow" # unsure
unnested_or_patterns = "allow" # unsure
large_futures = "allow" # unsure
unchecked_duration_subtraction = "allow" # unsure
missing_panics_doc = "allow" # unsure
missing_errors_doc = "allow" # unsure
unreadable_literal = "allow" # unsure (also complains about floats)
cast_possible_truncation = "allow" # unsure
cast_lossless = "allow" # unsure
cast_possible_wrap = "allow" # unsure
cast_precision_loss = "allow" # unneeded
trivially_copy_pass_by_ref = "allow" # TODO
unnecessary_wraps = "allow" # unsure
manual_string_new = "allow" # disagree
no_effect_underscore_binding = "allow" # broken (false positive in trait impls)

# nursery exceptions
or_fun_call = "allow" # unsure
future_not_send = "allow" # don't currently need this, just adds noise
suboptimal_flops = "allow" # cubeworld doesn't use these either, and we want to match its rounding behaviour

# restrictions exceptions
allow_attributes = "allow" # unusably buggy
allow_attributes_without_reason = "allow" # unusably buggy
missing_docs_in_private_items = "allow" # don't care yet
default_numeric_fallback = "allow" # disagree
let_underscore_untyped = "allow" # disagree
std_instead_of_alloc = "allow" # not relevant
std_instead_of_core = "allow" # not relevant
float_arithmetic = "allow" # not relevant
wildcard_enum_match_arm = "allow" # using `non-exhaustive` instead
implicit_return = "allow" # disagree
question_mark_used = "allow" # disagree
separated_literal_suffix = "allow" # using unseparated instead
missing_trait_methods = "allow" # not intended for global usage
pub_use = "allow" # disagree
exhaustive_structs = "allow" # disagree
exhaustive_enums = "allow" # disagree
missing_inline_in_public_items = "allow" # not relevant
self_named_module_files = "allow" # using `mod_module_files` instead
as_underscore = "allow" # disagree
single_call_fn = "allow" # disagree
impl_trait_in_params = "allow" #disagree
little_endian_bytes = "allow" # using `big_endian_bytes` instead
pub_with_shorthand = "allow" # using `pub_without_shorthand` instead
iter_over_hash_type = "allow" # disagree
infinite_loop = "allow" # broken (complains even after suggestion was applied)

pattern_type_mismatch = "allow" # unsure
multiple_inherent_impl = "allow" # unsure
shadow_reuse = "allow" # unsure
arithmetic_side_effects = "allow" # unsure
integer_division = "allow" # unsure
unwrap_used = "allow" # unsure
expect_used = "allow" # unsure
map_err_ignore = "allow" # unsure
panic_in_result_fn = "allow" # unsure
panic = "allow" # unsure
unreachable = "allow" # unsure
ref_patterns = "allow" # unsure
multiple_unsafe_ops_per_block = "allow" # unsure
partial_pub_fields = "allow" # unsure
modulo_arithmetic = "allow" # unsure
indexing_slicing = "allow" # unsure
as_conversions = "allow" # unsure


# suspicious exceptions
blanket_clippy_restriction_lints = "allow" # disagree